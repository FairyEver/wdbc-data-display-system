var Mock = require('mockjs')

Mock.mock(/\.mock/, ({url, type, body}) => {
  const bodyObj = JSON.parse(body)
  if (bodyObj.type === 1) {
    // 简单一个数字的数据
    if (bodyObj.name === 'djzs' || bodyObj.name === 'cbzs' || bodyObj.name === 'ylzs') {
      return Mock.mock({
        num: '@natural(400, 500)',
        num2: '@natural(-99, 99)',
        num3: '@natural(1, 20)'
      })
    } else if (bodyObj.name === 'cell-4') {
      return Mock.mock(['@natural(10, 300)', '@natural(100, 3000)', '@natural(400, 800)', '@natural(10, 80)'])
    } else {
      return Mock.mock({
        num: '@natural(100, 300)'
      })
    }
  } else if (bodyObj.type === 2) {
    // 键值对数据
    return Mock.mock({
      list: [
        {name: 'A', value: '@natural(10, 300)'},
        {name: 'B', value: '@natural(10, 300)'},
        {name: 'C', value: '@natural(10, 300)'},
        {name: 'D', value: '@natural(10, 300)'},
        {name: 'E', value: '@natural(10, 300)'},
        {name: 'F', value: '@natural(10, 300)'},
        {name: 'G', value: '@natural(10, 300)'},
        {name: 'H', value: '@natural(10, 300)'}
      ]
    })
  } else if (bodyObj.type === 3) {
    // 多series数据
    if (bodyObj.name === 'bar-stack') {
      // 判断参数 层叠柱状图
      const all = Mock.mock({
        name: '所有采集点',
        data: [
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)',
          '@natural(20, 100)'
        ]
      })
      return Mock.mock({
        legend: ['今日活跃', '所有采集点'],
        yAxis: ['河北', '山东', '浙江', '辽宁', '山西', '广东', '黑龙江', '河北2', '山东2', '浙江2', '辽宁2', '山西2', '广东2', '黑龙江2', '河北', '山东', '浙江', '辽宁', '山西', '广东', '黑龙江', '河北2', '山东2', '浙江2', '辽宁2', '山西2', '广东2', '黑龙江2'],
        series: [
          all,
          {
            name: '今日活跃',
            data: all.data.map(e => e - 10)
          }
        ]
      })
    } else if (bodyObj.name === 'table-hq') {
      return {
        title: ['地址', '红壳蛋', '粉壳蛋', '白壳蛋', '玉米', '豆粕', '淘汰鸡', '时间', '人员'],
        rows: [
          ['这是一个很长很长很长的地址1', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址2', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址3', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址4', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址5', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址6', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址7', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址8', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址9', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址10', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址11', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址12', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址13', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址14', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址15', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址16', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址17', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址18', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址19', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址20', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址21', 15, 15, 15, 15, 15, 15, '20:08', '人员'],
          ['这是一个很长很长很长的地址22', 15, 15, 15, 15, 15, 15, '20:08', '人员']
        ]
      }
    } else if (bodyObj.name === 'radar-style-1') {
      return {
        indicator: [
          {
            'name': '红壳鸡蛋',
            'min': 1500,
            'max': 3500,
            'label': {
              'max': {
                'value': 3000,
                'name': '最大值的地名'
              },
              'min': {
                'value': 12,
                'name': '最小的地名'
              },
              'avg': {
                'value': 123
              }
            }
          },
          {
            'name': '粉壳鸡蛋',
            'min': 2500,
            'max': 4500,
            'label': {
              'max': {
                'value': 3000,
                'name': '最大值的地名'
              },
              'min': {
                'value': 12,
                'name': '最小的地名'
              },
              'avg': {
                'value': 123
              }
            }
          },
          {
            'name': '白壳鸡蛋',
            'min': 2500,
            'max': 5500,
            'label': {
              'max': {
                'value': 3000,
                'name': '最大值的地名'
              },
              'min': {
                'value': 12,
                'name': '最小的地名'
              },
              'avg': {
                'value': 123
              }
            }
          },
          {
            'name': '玉米',
            'min': 500,
            'max': 2500,
            'label': {
              'max': {
                'value': 3000,
                'name': '最大值的地名'
              },
              'min': {
                'value': 12,
                'name': '最小的地名'
              },
              'avg': {
                'value': 123
              }
            }
          },
          {
            'name': '豆粕',
            'min': 10,
            'max': 40,
            'label': {
              'max': {
                'value': 3000,
                'name': '最大值的地名'
              },
              'min': {
                'value': 12,
                'name': '最小的地名'
              },
              'avg': {
                'value': 123
              }
            }
          },
          {
            'name': '淘汰鸡',
            'min': 2500,
            'max': 4500,
            'label': {
              'max': {
                'value': 3000,
                'name': '最大值的地名'
              },
              'min': {
                'value': 12,
                'name': '最小的地名'
              },
              'avg': {
                'value': 123
              }
            }
          }
        ],
        series: [
          // 最高价
          [3000, 4000, 5000, 2000, 30, 4000],
          // 平均价
          [2200, 3400, 3300, 1200, 22, 3500],
          // 最低价
          [2000, 3000, 3000, 1000, 20, 3000]
        ]
      }
    } else {
      // 判断参数 最基础的数据 多条折线图
      return Mock.mock({
        legend: ['类型1', '类型2', '类型3'],
        xAxis: ['A', 'B', 'C', 'D', 'E', 'F', 'G'],
        series: [
          {
            name: '类型1',
            data: ['@natural(1, 100)', '@natural(1, 100)', '@natural(1, 100)', '@natural(1, 100)', '@natural(1, 100)', '@natural(1, 100)', '@natural(1, 100)']
          }, {
            name: '类型2',
            data: ['@natural(101, 200)', '@natural(101, 200)', '@natural(101, 200)', '@natural(101, 200)', '@natural(101, 200)', '@natural(101, 200)', '@natural(101, 200)']
          }, {
            name: '类型3',
            data: ['@natural(201, 300)', '@natural(201, 300)', '@natural(201, 300)', '@natural(201, 300)', '@natural(201, 300)', '@natural(201, 300)', '@natural(201, 300)']
          }
        ]
      })
    }
  }
})
